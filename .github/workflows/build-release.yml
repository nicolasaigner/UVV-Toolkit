name: Build and Release UVV CLI Toolkit

on:
  push:
    branches:
      - main

permissions:
  contents: write
  actions: write

jobs:
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.extract_version.outputs.version }}
    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Extrair vers√£o do main.py
        id: extract_version
        run: |
          VERSION=$(grep '^VERSION *= *"' main.py | head -n1 | sed -E 's/.*"([^"]+)".*/\1/')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build:
    needs: prepare
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        # macos-latest (comentado)

    env:
      VERSION: ${{ needs.prepare.outputs.version }}

    steps:
      - name: Checkout c√≥digo
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Instalar depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      - name: Rodar build com PyInstaller
        run: python build.py

      - name: Upload de artefatos
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build
          path: dist/*

  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest

    env:
      VERSION: ${{ needs.prepare.outputs.version }}

    steps:
      - name: Baixar artefatos (Windows)
        uses: actions/download-artifact@v4
        with:
          name: Windows-build
          path: ./dist/windows

      - name: Baixar artefatos (Linux)
        uses: actions/download-artifact@v4
        with:
          name: Linux-build
          path: ./dist/linux

      # - name: Baixar artefatos (macOS)
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: macOS-build
      #     path: ./dist/macos

      - name: Criar release e enviar execut√°veis
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            dist/windows/*
            dist/linux/*
            # dist/macos/*.zip

  rollback:
    if: ${{ failure() }}
    needs: [prepare, build]
    runs-on: ubuntu-latest

    env:
      VERSION: ${{ needs.prepare.outputs.version }}
      GH_PAT: ${{ secrets.GH_PAT }}

    steps:
      - name: Deletar tag e release se falhar
        run: |
          echo "üîÅ Build falhou. Deletando tag e release..."
          gh release delete "$VERSION" --yes || true
          gh api -X DELETE /repos/${{ github.repository }}/git/refs/tags/"$VERSION" || true
