name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write

jobs:
  extract-version:
    name: üîç Extrair Vers√£o
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - name: Extrair vers√£o do main.py
        id: version
        run: |
          VERSION=$(grep -oP 'VERSION\s*=\s*"\Kv?[0-9]+\.[0-9]+\.[0-9]+' main.py)
          echo "Vers√£o detectada: $VERSION"
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Criar tag
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git tag -a v${{ steps.version.outputs.VERSION }} -m "Release v${{ steps.version.outputs.VERSION }}"
          git push origin v${{ steps.version.outputs.VERSION }}

  build:
    name: üî® Build multiplataforma
    needs: extract-version
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    env:
      VERSION: ${{ needs.extract-version.outputs.version }}
    steps:
      - uses: actions/checkout@v4

      - name: Instalar depend√™ncias do sistema (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y curl binutils

      - name: Instalar Python e depend√™ncias
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller selenium beautifulsoup4 webdriver-manager pystyle keyboard requests

      - name: Executar build.py
        run: python build.py

      - name: Renomear bin√°rio com vers√£o
        run: |
          mkdir output
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            mv dist/UVV_Toolkit.exe "output/UVV_Toolkit-v${VERSION}.exe"
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            mv dist/UVV_Toolkit "output/UVV_Toolkit-v${VERSION}.app"
          else
            mv dist/UVV_Toolkit "output/UVV_Toolkit-v${VERSION}.elf"
          fi

      - name: Upload de artefato
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}
          path: output/*

  release:
    name: üöÄ Criar Release
    needs: [extract-version, build]
    runs-on: ubuntu-latest
    env:
      VERSION: ${{ needs.extract-version.outputs.version }}
    steps:
      - uses: actions/download-artifact@v4

      - name: Publicar release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ env.VERSION }}
          files: |
            build-ubuntu-latest/*
            build-windows-latest/*
            build-macos-latest/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Apagar tag se falhar (fallback)
        if: failure()
        run: |
          echo "‚ùå Build falhou. Deletando tag v${VERSION}..."
          gh auth login --with-token <<< "${{ secrets.GH_PAT }}"
          gh release delete v${VERSION} --yes || true
          gh tag delete v${VERSION} || true
