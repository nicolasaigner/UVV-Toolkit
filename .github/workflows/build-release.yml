name: Build and Release UVV CLI Toolkit

on:
  push:
    branches:
      - main

permissions:
  contents: write
  actions: write

env:
  EXECUTABLE_NAME: UVV_Toolkit

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout c칩digo
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Instalar depend칡ncias
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller

      - name: Rodar build com PyInstaller
        run: |
          python build.py
        shell: bash

      - name: Renomear execut치vel (Windows)
        if: runner.os == 'Windows'
        run: |
          VERSION=$(python -c "import main; print(main.VERSION)")
          mv dist/${{ env.EXECUTABLE_NAME }}.exe dist/${{ env.EXECUTABLE_NAME }}_win_x86_64-${VERSION}.exe

      - name: Renomear execut치vel (Linux)
        if: runner.os == 'Linux'
        run: |
          VERSION=$(python -c "import main; print(main.VERSION)")
          mv dist/${{ env.EXECUTABLE_NAME }} dist/${{ env.EXECUTABLE_NAME }}_linux_x86_64-${VERSION}

      - name: Renomear e zipar execut치vel (macOS)
        if: runner.os == 'macOS'
        run: |
          VERSION=$(python -c "import main; print(main.VERSION)")
          mv dist/${{ env.EXECUTABLE_NAME }} dist/${{ env.EXECUTABLE_NAME }}_universal_apple_darwin-${VERSION}
          cd dist
          zip UVV_Toolkit_universal_apple_darwin-${VERSION}.zip UVV_Toolkit_universal_apple_darwin-${VERSION}
          rm UVV_Toolkit_universal_apple_darwin-${VERSION}

      - name: Upload de artefatos
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build
          path: |
            dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ success() }}
    steps:
      - name: Baixar artefatos (Windows)
        uses: actions/download-artifact@v4
        with:
          name: Windows-build
          path: ./dist/windows

      - name: Baixar artefatos (Linux)
        uses: actions/download-artifact@v4
        with:
          name: Linux-build
          path: ./dist/linux

      - name: Baixar artefatos (macOS)
        uses: actions/download-artifact@v4
        with:
          name: macOS-build
          path: ./dist/macos

      - name: Obter vers칚o do c칩digo
        id: get_version
        run: |
          VERSION=$(python -c "import main; print(main.VERSION)")
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Criar release e enviar execut치veis
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ steps.get_version.outputs.version }}
          tag_name: ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false
          files: |
            dist/windows/*.exe
            dist/linux/*
            dist/macos/*.zip

  rollback:
    needs: build
    if: ${{ failure() }}
    runs-on: ubuntu-latest
    steps:
      - name: Obter vers칚o do c칩digo
        run: |
          VERSION=$(python -c "import main; print(main.VERSION)")
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Deletar tag e release se falhar
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          echo "游대 Build falhou. Deletando tag e release..."
          gh release delete "$VERSION" --yes || true
          gh api -X DELETE /repos/${{ github.repository }}/git/refs/tags/"$VERSION" || true
