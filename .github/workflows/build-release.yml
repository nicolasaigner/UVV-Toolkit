name: Build and Release UVV CLI Toolkit

on:
  push:
    branches:
      - main

permissions:
  contents: write
  actions: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Configurar Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Extrair versão do main.py
        id: version
        run: |
          VERSION=$(grep '^VERSION' main.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Instalar dependências
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt pyinstaller

      - name: Rodar build com PyInstaller
        run: |
          python build.py
        shell: bash

      - name: Renomear executável Windows
        if: runner.os == 'Windows'
        run: |
          mv dist/UVV_Toolkit.exe dist/UVV_Toolkit_win_x86_64-${{ env.VERSION }}.exe

      - name: Renomear executável Linux
        if: runner.os == 'Linux'
        run: |
          mv dist/UVV_Toolkit dist/UVV_Toolkit_linux_x86_64-${{ env.VERSION }}

      - name: Renomear executável macOS
        if: runner.os == 'macOS'
        run: |
          mv dist/UVV_Toolkit dist/UVV_Toolkit_universal_apple_darwin-${{ env.VERSION }}.app

      - name: Upload de artefatos
        uses: actions/upload-artifact@v4
        with:
          name: ${{ runner.os }}-build
          path: dist/*

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Baixar artefatos (Windows)
        uses: actions/download-artifact@v4
        with:
          name: Windows-build
          path: ./dist/windows

      - name: Baixar artefatos (Linux)
        uses: actions/download-artifact@v4
        with:
          name: Linux-build
          path: ./dist/linux

      - name: Baixar artefatos (macOS)
        uses: actions/download-artifact@v4
        with:
          name: macOS-build
          path: ./dist/macos

      - name: Obter versão do main.py
        id: version
        run: |
          VERSION=$(grep '^VERSION' main.py | cut -d'"' -f2)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Criar release e enviar executáveis
        id: create_release
        continue-on-error: true
        uses: softprops/action-gh-release@v2
        with:
          name: Release ${{ env.VERSION }}
          tag_name: ${{ env.VERSION }}
          draft: false
          prerelease: false
          files: |
            dist/windows/*.exe
            dist/linux/*
            dist/macos/*

      - name: Rollback se falhar
        if: steps.create_release.outcome == 'failure'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
          VERSION: ${{ env.VERSION }}
        run: |
          echo "⚠️ Falha na release. Deletando release e tag..."
          gh release delete "$VERSION" --yes || true
          gh api -X DELETE /repos/${{ github.repository }}/git/refs/tags/"$VERSION" || true
